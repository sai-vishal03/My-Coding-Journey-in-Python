### 1. For Loop

The `for` loop iterates over a sequence, such as a list or a range of numbers.

**Example 1: Loop through a list**

```python
# Define a list of fruits
fruits = ["apple", "banana", "cherry"]

# Iterate over each fruit in the list
for fruit in fruits:
    print(fruit)  # Outputs each fruit on a new line
```
**Output:**
```
apple
banana
cherry
```

**Example 2: Loop through a range of numbers**

```python
# Use range to create a sequence of numbers from 0 to 4
for i in range(5):  # range(5) generates 0, 1, 2, 3, 4
    print(i)  # Outputs each number on a new line
```
**Output:**
```
0
1
2
3
4
```

### 2. While Loop

The `while` loop continues to execute as long as a specified condition is true.

**Example: Loop until a condition is met**

```python
# Initialize count variable
count = 0

# Loop as long as count is less than 5
while count < 5:
    print(count)  # Outputs the current value of count
    count += 1    # Increment count by 1
```
**Output:**
```
0
1
2
3
4
```

### 3. Break and Continue

- **`break`**: Immediately exits the loop.
- **`continue`**: Skips the current iteration and proceeds to the next one.

**Example with break:**

```python
# Loop through numbers 0 to 9
for i in range(10):
    if i == 5:  # If i is 5, exit the loop
        break
    print(i)  # Outputs numbers until i is 5
```
**Output:**
```
0
1
2
3
4
```

**Example with continue:**

```python
# Loop through numbers 0 to 9
for i in range(10):
    if i % 2 == 0:  # If i is even, skip the iteration
        continue
    print(i)  # Outputs only odd numbers
```
**Output:**
```
1
3
5
7
9
```

### Summary
In this section, we learned about loops in Python. We covered 
the `for` loop to iterate through sequences and ranges, the 
`while` loop to execute code as long as a condition is true, 
and how to control loop behavior with `break` to exit a loop 
and `continue` to skip iterations. These constructs help 
automate repetitive tasks efficiently.
