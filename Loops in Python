Loops in Python
For Loop: A for loop is used to iterate over a sequence, such as a list or range.

Example: Iterating over a list of tasks.

python
Copy code
tasks = ["clean", "cook", "study"]
for task in tasks:
    print(f"Doing {task}")
Real-World Example: You might use a for loop to process items in a shopping list.

While Loop: A while loop continues executing as long as a condition remains true.

Example: Counting down until a task is completed.

python
Copy code
count = 5
while count > 0:
    print(f"{count} seconds remaining")
    count -= 1
Real-World Example: A countdown timer for an exam.

Break and Continue: break exits a loop immediately, while continue skips the current iteration.

Example with Break:

python
Copy code
for i in range(10):
    if i == 5:
        break
    print(i)
Real-World Example: Stopping a search when the desired item is found.

Example with Continue:

python
Copy code
for i in range(10):
    if i % 2 == 0:
        continue
    print(i)
Real-World Example: Filtering out even numbers when processing data.

Summary
In this section, we learned about loops in Python. We covered 
the `for` loop to iterate through sequences and ranges, the 
`while` loop to execute code as long as a condition is true, 
and how to control loop behavior with `break` to exit a loop 
and `continue` to skip iterations. These constructs help 
automate repetitive tasks efficiently.
